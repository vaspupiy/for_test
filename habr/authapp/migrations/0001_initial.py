# Generated by Django 4.0 on 2022-02-17 07:15

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='id')),
                ('created_timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Create Date')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='authapp.basemodel')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=25, unique=True, verbose_name='user_name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email')),
                ('password', models.CharField(max_length=250, verbose_name='password')),
                ('is_banned', models.BooleanField(default=False, verbose_name='Заблокирован')),
                ('date_end_banned', models.DateTimeField(blank=True, default=None, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('authapp.basemodel', models.Model),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Имя Фамилия')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='День рождения')),
                ('bio', models.TextField(max_length=120, verbose_name='Краткое описание')),
                ('avatar', models.ImageField(upload_to='user_avatars', verbose_name='Аватар')),
                ('rating', models.PositiveIntegerField(default=0, verbose_name='author_rating')),
                ('previous_article_rating', models.PositiveIntegerField(default=0, verbose_name='article_previous_rating')),
                ('stars', models.ManyToManyField(blank=True, related_name='author_stars', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='authapp.user')),
            ],
        ),
        migrations.CreateModel(
            name='NotificationUsersAboutBlocking',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='authapp.basemodel')),
                ('moderator_who_blocked', models.UUIDField(verbose_name='кем заблокирован')),
                ('is_read', models.BooleanField(default=False, verbose_name='прочитано')),
                ('message', models.CharField(blank=True, max_length=350, null=True, verbose_name='дата снятия блокировки')),
                ('blocked_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='authapp.user', verbose_name='кто заблокирован')),
            ],
            bases=('authapp.basemodel',),
        ),
    ]
